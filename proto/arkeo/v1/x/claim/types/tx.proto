syntax = "proto3";

package arkeo.claim;
import "arkeo/claim/claim_record.proto";
import "gogoproto/gogo.proto";
option go_package = "github.com/arkeonetwork/arkeo/x/claim/types";

// Msg defines the Msg service.
service Msg {
  rpc ClaimEth(MsgClaimEth) returns (MsgClaimEthResponse);
  rpc ClaimArkeo(MsgClaimArkeo) returns (MsgClaimArkeoResponse);
  rpc TransferClaim(MsgTransferClaim) returns (MsgTransferClaimResponse);
  rpc AddClaim(MsgAddClaim) returns (MsgAddClaimResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}
message MsgClaimEth {
  bytes creator = 1 [ (gogoproto.casttype) =
                          "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  string eth_address = 2; // the adress the claim is for
  string signature = 3; // EIP712 signature that has to be signed by ethAddress
}

message MsgClaimEthResponse {}

message MsgClaimArkeo {
  bytes creator = 1 [ (gogoproto.casttype) =
                          "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
}

message MsgClaimArkeoResponse {}

message MsgTransferClaim {
  bytes creator = 1 [ (gogoproto.casttype) =
                          "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  bytes toAddress = 2 [ (gogoproto.casttype) =
                            "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
}

message MsgTransferClaimResponse {}

message MsgAddClaim {
  bytes creator = 1 [ (gogoproto.casttype) =
                          "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  Chain chain = 2;
  string address = 3;
  int64 amount = 4;
}

message MsgAddClaimResponse {}

// this line is used by starport scaffolding # proto/tx/message
