import { getCodecs } from "./codecs";

describe("codecs", () => {
  it("registers all the codecs", async () => {
    expect(getCodecs()).toMatchInlineSnapshot(`
      Map {
        "/cosmos.tx.v1beta1.Tx" => [Function],
        "/cosmos.tx.v1beta1.TxRaw" => [Function],
        "/cosmos.tx.v1beta1.SignDoc" => [Function],
        "/cosmos.tx.v1beta1.TxBody" => [Function],
        "/cosmos.tx.v1beta1.AuthInfo" => [Function],
        "/cosmos.tx.v1beta1.SignerInfo" => [Function],
        "/cosmos.tx.v1beta1.ModeInfo" => [Function],
        "/cosmos.tx.v1beta1.Fee" => [Function],
        "/cosmos.tx.signing.v1beta1.SignatureDescriptors" => [Function],
        "/cosmos.tx.signing.v1beta1.SignatureDescriptor" => [Function],
        "/cosmos.crypto.multisig.v1beta1.CompactBitArray" => [Function],
        "/cosmos.bank.v1beta1.MsgSend" => [Function],
        "/cosmos.bank.v1beta1.MsgSendResponse" => [Function],
        "/cosmos.bank.v1beta1.MsgMultiSend" => [Function],
        "/cosmos.bank.v1beta1.MsgMultiSendResponse" => [Function],
        "/cosmos.bank.v1beta1.Params" => [Function],
        "/cosmos.bank.v1beta1.SendEnabled" => [Function],
        "/cosmos.bank.v1beta1.Input" => [Function],
        "/cosmos.bank.v1beta1.Output" => [Function],
        "/cosmos.bank.v1beta1.Supply" => [Function],
        "/cosmos.bank.v1beta1.DenomUnit" => [Function],
        "/cosmos.bank.v1beta1.Metadata" => [Function],
        "/cosmos.base.v1beta1.Coin" => [Function],
        "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress" => [Function],
        "/cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse" => [Function],
        "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward" => [Function],
        "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse" => [Function],
        "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission" => [Function],
        "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse" => [Function],
        "/cosmos.distribution.v1beta1.MsgFundCommunityPool" => [Function],
        "/cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse" => [Function],
        "/cosmos.staking.v1beta1.MsgCreateValidator" => [Function],
        "/cosmos.staking.v1beta1.MsgCreateValidatorResponse" => [Function],
        "/cosmos.staking.v1beta1.MsgEditValidator" => [Function],
        "/cosmos.staking.v1beta1.MsgEditValidatorResponse" => [Function],
        "/cosmos.staking.v1beta1.MsgDelegate" => [Function],
        "/cosmos.staking.v1beta1.MsgDelegateResponse" => [Function],
        "/cosmos.staking.v1beta1.MsgBeginRedelegate" => [Function],
        "/cosmos.staking.v1beta1.MsgBeginRedelegateResponse" => [Function],
        "/cosmos.staking.v1beta1.MsgUndelegate" => [Function],
        "/cosmos.staking.v1beta1.MsgUndelegateResponse" => [Function],
        "/cosmos.staking.v1beta1.CommissionRates" => [Function],
        "/cosmos.staking.v1beta1.Description" => [Function],
        "/google.protobuf.Any" => [Function],
        "/google.protobuf.Timestamp" => [Function],
        "/google.protobuf.Duration" => [Function],
        "/ibc.applications.transfer.v1.MsgTransfer" => [Function],
        "/ibc.applications.transfer.v1.MsgTransferResponse" => [Function],
        "/ibc.core.client.v1.Height" => [Function],
        "/osmosis.gamm.v1beta1.MsgCreatePool" => [Function],
        "/osmosis.gamm.v1beta1.MsgCreatePoolResponse" => [Function],
        "/osmosis.gamm.v1beta1.MsgJoinPool" => [Function],
        "/osmosis.gamm.v1beta1.MsgJoinPoolResponse" => [Function],
        "/osmosis.gamm.v1beta1.MsgExitPool" => [Function],
        "/osmosis.gamm.v1beta1.MsgExitPoolResponse" => [Function],
        "/osmosis.gamm.v1beta1.SwapAmountInRoute" => [Function],
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountIn" => [Function],
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountInResponse" => [Function],
        "/osmosis.gamm.v1beta1.SwapAmountOutRoute" => [Function],
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountOut" => [Function],
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountOutResponse" => [Function],
        "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn" => [Function],
        "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountInResponse" => [Function],
        "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut" => [Function],
        "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOutResponse" => [Function],
        "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn" => [Function],
        "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountInResponse" => [Function],
        "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut" => [Function],
        "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOutResponse" => [Function],
        "/osmosis.gamm.v1beta1.PoolAsset" => [Function],
        "/osmosis.gamm.v1beta1.SmoothWeightChangeParams" => [Function],
        "/osmosis.gamm.v1beta1.PoolParams" => [Function],
        "/osmosis.gamm.v1beta1.Pool" => [Function],
        "/osmosis.lockup.PeriodLock" => [Function],
        "/osmosis.lockup.QueryCondition" => [Function],
        "/osmosis.lockup.MsgLockTokens" => [Function],
        "/osmosis.lockup.MsgLockTokensResponse" => [Function],
        "/osmosis.lockup.MsgBeginUnlockingAll" => [Function],
        "/osmosis.lockup.MsgBeginUnlockingAllResponse" => [Function],
        "/osmosis.lockup.MsgBeginUnlocking" => [Function],
        "/osmosis.lockup.MsgBeginUnlockingResponse" => [Function],
        "/common.Asset" => [Function],
        "/common.Coin" => [Function],
        "/common.PubKeySet" => [Function],
        "/common.Tx" => [Function],
        "/common.Fee" => [Function],
        "/types.MsgSend" => [Function],
        "/types.MsgDeposit" => [Function],
      }
    `);
  });
});
